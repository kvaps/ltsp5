#!/bin/sh

# We support two methods to call the init-ltsp.d scripts.
# Either directly by passing "init=/sbin/init-ltsp" in the kernel cmdline,
# or indirectly with "ltsp.init=xxx", where the LTSP initramfs scripts
# need to take care so that the specified init is called.

PREREQ=""

prereqs()
{
    echo "$PREREQ"
}

case "$1" in
    prereqs)
        prereqs
        exit 0
        ;;
esac

grep -qs "init=/sbin/init-ltsp" /proc/cmdline || exit 0
. /scripts/functions

[ -z "${rootmnt}" ] && panic "rootmnt unknown in init-bottom"
[ -d "${rootmnt}/proc" ] || panic "rootmnt not mounted in init-bottom"
# mount writeable filesystems if / is not already mounted writeable.
if ! chroot ${rootmnt} /usr/bin/test -w "/" ; then
    mkdir -p /rofs /cow
    mount -t tmpfs -o mode=0755 tmpfs /cow
    if [ "$LTSP_NBD_TO_RAM" = "true" ]; then
        umount ${rootmnt}
        dd if=/dev/nbd0 of=/cow/.rofsimage.img bs=1024k
        nbd-client -d /dev/nbd0
        mount -o loop /cow/.rofsimage.img /rofs
    elif [ "$LTSP_NBD_TO_DRIVE" = "true" ]; then
        umount ${rootmnt}
        mkdir -p /data

        if ! mount "$LTSP_DATA_DRIVE" /data; then
            # Check if drive is empty
            until [ $(wipefs "$LTSP_DATA_DRIVE" -p | wc -l) == "0" ]; do
                echo
                echo "Error: We can not prepare $LTSP_DATA_DRIVE device,"
                echo "because some signatures founded on it:"
                echo
                wipefs "$LTSP_DATA_DRIVE"
                echo "Type the following command for remove any signatures from it:"
                echo
                echo "    # wipefs -a $LTSP_DATA_DRIVE"
                echo
                echo "Be careful, any data will be loss!"
                read
                sh
            done
            mkfs.ext4 "$LTSP_DATA_DRIVE"
            mount "$LTSP_DATA_DRIVE" /data
        fi

        # Checks for offline update
        if [ -f /data/.rofsimage.img.new ]; then
            # Install offline update
            echo -e "\033[1;32m\nApplying new image...\n\033[0m"
            mv /data/.rofsimage.img.new /data/.rofsimage.img

        # Checks for online update
        elif [ ! -f /data/.rofsimage.img ] || (
                 [ "${LTSP_NBD_TO_DRIVE_AUTOREFRESH:-true}" = "true" ] && (
                 [ "$(losetup /dev/loop0 /data/.rofsimage.img; blockdev --getsz /dev/loop0; losetup -d /dev/loop0)" != "$(blockdev --getsz /dev/nbd0)" ] ||
                 dd if=/dev/nbd0 bs=512 count=1 2>/dev/null | cmp /data/.rofsimage.img 2> /dev/null | grep -q differ )
             ) || (
                 [ "${LTSP_NBD_TO_DRIVE_AUTOREFRESH:-true}" != "true" ] && 
                 [ "$(mount -o loop /data/.rofsimage.img /rofs; stat -c %F "/rofs/lib/modules/$(uname -r)"; umount /rofs)" != "directory" ]
             )
        then
            # Install online update
            echo -e "\033[1;32m\nDownloading new image...\n\033[0m"
            rm -f /data/.rofsimage.img
            dd if=/dev/nbd0 of=/data/.rofsimage.img bs=1024k

        # Message when image is actual
        elif [ "${LTSP_NBD_TO_DRIVE_AUTOREFRESH:-true}" = "true" ]; then
            echo -e "\033[1;32m\nImage is actual\n\033[0m"
        else
            echo -e "\033[1;32m\nNo offline update found\n\033[0m"
        fi

        nbd-client -d /dev/nbd0
        mount -o loop /data/.rofsimage.img /rofs
    else
        mount -o move ${rootmnt} /rofs
    fi
    if modprobe overlay; then
        UNION_TYPE=overlay
        UNION_OPTS="upperdir=/cow/up,lowerdir=/rofs,workdir=/cow/work"
        mkdir -p /cow/up /cow/work
    elif modprobe overlayfs; then
        UNION_TYPE=overlayfs
        UNION_OPTS="upperdir=/cow,lowerdir=/rofs"
    elif modprobe aufs; then
        UNION_TYPE=aufs
        UNION_OPTS="dirs=/cow=rw:/rofs=ro"
    else
        panic "Could not load neither overlayfs nor aufs."
    fi
    mount -t ${UNION_TYPE} -o ${UNION_OPTS} ${UNION_TYPE} ${rootmnt}
    for dir in /rofs /cow ; do
        mkdir -p ${rootmnt}${dir}
        mount -o move ${dir} ${rootmnt}${dir}
    done
    if [ "${LTSP_MOUNT_DATA_DRIVE:-true}" = "true" ]; then
        mkdir -p ${rootmnt}/data
        mount -o move /data ${rootmnt}/data
    fi
fi

# Copy networking configuration to the root file system
mkdir -p "$rootmnt/var/cache/ltsp/"
for netconf in /tmp/net-*.conf /run/net-*.conf; do
    if [ -f "$netconf" ]; then
        cp "$netconf" "$rootmnt/var/cache/ltsp/"
    fi
done

ltspinit=$(sed -n 's/.*ltsp.init=\([^[:space:]]*\).*/\1/p' /proc/cmdline)
if [ -n "$ltspinit" ]; then
    echo "init=$ltspinit" >> /conf/param.conf
fi
